/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'application'

mainClassName = "org.impstack.Main"
applicationDefaultJvmArgs = ["-Duser.language=en", "-Xms64m", "-Xmx128m"]
//applicationDefaultJvmArgs = ["-Duser.language=en", "-Dfullscreen"]
/*
ext {
    fullName = "Lost in the woods"
    shortName = "litw"
    globalVersion = "0.1-SNAPSHOT"
    buildNumber = "1"
    jmeVersion = "3.2.+"
}

repositories {
    mavenLocal()
    jcenter()
    // jme3-testdata
    maven { url "https://dl.bintray.com/stephengold/org.jmonkeyengine" }
    // impstack
    maven { url "https://dl.bintray.com/remyvd/impstack" }
}

dependencies {
    runtime project(':assets')
    // jme
    compile "org.jmonkeyengine:jme3-core:${jmeVersion}"
    compile "org.jmonkeyengine:jme3-desktop:${jmeVersion}"
    compile "org.jmonkeyengine:jme3-lwjgl:${jmeVersion}"
    compile "org.jmonkeyengine:jme3-bullet-native:${jmeVersion}"
    compile "org.jmonkeyengine:jme3-blender:${jmeVersion}"
    // lemur
    compile "com.simsilica:lemur:+"
    compile "com.simsilica:lemur-proto:+"
    // impstack
    compile "org.impstack:impstack-utils:+"
    compile "org.impstack:dnd:+"
    // logging
    compile "org.slf4j:slf4j-api:1.7.+"
    compile "org.slf4j:jul-to-slf4j:1.7.+"
    compile "org.apache.logging.log4j:log4j-core:2.7"
    compile "org.apache.logging.log4j:log4j-api:2.7"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.7"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.+"
    compile "com.fasterxml.jackson.core:jackson-databind:2.8.+"
    // test
    testCompile "junit:junit:4.+"
    testCompile "org.jmonkeyengine:jme3-testdata:+"
    // groovy
    runtime 'org.codehaus.groovy:groovy-all:2.4.7'
}

jar.dependsOn "generateApplicationInfo"

clean.doFirst {
    delete "liblwjgl.dylib"
    delete "libopenal.dylib"
    delete "libbulletjme.dylib"
}

task generateApplicationInfo() {
    doLast {
        def p = new Properties()
        p.setProperty("name", fullName)
        p.setProperty("version", globalVersion)
        p.setProperty("build", buildNumber)
        p.setProperty("build.timestamp", System.currentTimeMillis().toString())
        p.store(file("${projectDir}/src/main/resources/version.properties").newWriter(), null)
    }
}
*/
// global custom variables
//ext {
//    fullName = "Lost in the woods"
//    shortName = "litw"
//    globalVersion = "0.1-SNAPSHOT"
//    buildNumber = "1"
//    mainClass = "org.impstack.litw.Launcher"
//}

//subprojects {
//    repositories {
//        mavenLocal()
//        jcenter()
//    }
//}

//allprojects {
//}

//subprojects {
//    apply plugin: 'java'
//    apply plugin: 'idea'
//    apply plugin: 'maven'

//    repositories {
//        mavenLocal()
//        jcenter()
//    }

//}

//project(':assets') {
//}

//project(':jme') {
//}

//project(':dnd') {
//}

/**
 * allprojects {task hello << { task -> println "I'm $task.project.name" }}subprojects {apply plugin: "java"
 repositories {mavenCentral()}}//API Project specific stuff
 project(':api') {}//Common Project specific stuff
 project(':common') {}//App Project specific stuff
 project(':app') {}*/

//apply plugin: 'java'
//apply plugin: 'idea'
//apply plugin: 'maven'
//
//group = 'org.impstack'
//version = '0.1-SNAPSHOT'
//
//sourceCompatibility = 1.8
//
//ext {
//    shortName = "dnd"
//    fullName = "DnD"
//    mainClass = "org.impstack.dnd.jme.Launcher"
//}
//
//repositories {
//    mavenLocal()
//    jcenter()
//}
//
//dependencies {
//    compile "org.slf4j:slf4j-api:1.7.+"
//    compile "com.h2database:h2:1.4.+"
//    compile "org.springframework:spring-context:4.3.+"
//    compile "org.springframework.data:spring-data-jpa:1.+"
//    compile "org.hibernate:hibernate-core:5.+"
//    compile "com.zaxxer:HikariCP:2.+"
//    compile "org.apache.logging.log4j:log4j-core:2.7"
//    compile "org.apache.logging.log4j:log4j-api:2.7"
//    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.7"
//    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.+"
//    compile "com.fasterxml.jackson.core:jackson-databind:2.8.+"
//    compile "org.impstack:jme-utils:0.+"
//    compile "org.jmonkeyengine:jme3-core:3.1.+"
//    compile "org.jmonkeyengine:jme3-desktop:3.1.+"
//    compile "org.jmonkeyengine:jme3-lwjgl:3.1.+"
//    compile "com.simsilica:lemur:+"
//    compile "com.simsilica:lemur-proto:+"
//    runtime 'org.codehaus.groovy:groovy-all:2.4.7'
//    testCompile "junit:junit:4.+"
//    runtime project(':assets')
//}
//
//project(":jme") {
//    apply plugin: "java"
//}
//
//project(":assets") {
//    apply plugin: "java"
//
//    buildDir = rootProject.file("build/assets")
//
//    sourceSets {
//        main {
//            resources {
//                srcDir '.'
//            }
//        }
//    }
//}
//
//jar {
//    manifest {
//        attributes(
//                "Main-Class": mainClass,
//                "Class-Path": configurations.runtime.collect { it.getName() }.join(' ')
//        )
//    }
//    baseName = shortName
//    version = version
//}
//
//assemble.dependsOn "copyLibs", "appInfo"
//
//task copyLibs(type: Copy) {
//    from configurations.runtime
//    into "${buildDir}/libs"
//}
//
//task incrementBuildNumber() << {
//    def p = new Properties()
//    p.load(file("${projectDir}/version.properties").newInputStream())
//    p.setProperty("build.number", String.valueOf(p.getProperty("build.number").toInteger() + 1))
//    p.store(file("${projectDir}/version.properties").newWriter(), null)
//}
//
//task appInfo() << {
//    def p = new Properties()
//    p.load(file("${projectDir}/version.properties").newInputStream())
//    def buildNumber = p.getProperty("build.number")
//
//    p = new Properties()
//    p.setProperty("name", fullName)
//    p.setProperty("version", version.toString())
//    p.setProperty("build", buildNumber)
//    p.setProperty("build.timestamp", System.currentTimeMillis().toString())
//    p.store(file("${projectDir}/src/main/resources/version.properties").newWriter(), null)
//}
